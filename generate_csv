#!/usr/bin/python2.7

from datetime import datetime
import os

__author__ = 'Nick Apperley'
input_file = 'iperf_results.txt'
csv_file = 'bandwidth_test.csv'
# End of file.
eof = ''


def _main():
    data = {}
    mode = 'r'

    with open(input_file, mode) as f:
        while True:
            result = _read_result(f)

            # Check if the end of the file has been reached.
            if len(result) == 1 and result[0] == eof:
                break
            elif len(result) == 5:
                data[result[0]] = [result[1], result[2], result[3], result[4]]
    _create_csv(data)


def _create_csv(data):
    mode = 'w'
    headers = 'Timestamp, Server IP Addr, TCP Window Size, Transfer, Bandwidth\n'

    if not os.path.exists(csv_file):
        with open(csv_file, mode) as f:
            f.write(headers)
            for key in data:
                items = data[key]
                f.write('"%s", ' % key)
                _process_csv_items(items, f)


def _process_csv_items(items, items_file):
    pos = 0

    for i in items:
        if (pos + 1) == len(items):
            items_file.write('%s\n' % i)
        else:
            items_file.write('%s, ' % i)
        pos += 1


def _is_timestamp(data):
    # Use the following date format: 24hour:minute:second
    # day-month-year. Example date: 28 Feb 2004, 14:45:10.
    date_format = '%d %b %Y, %H:%M:%S'
    result = True

    try:
        datetime.strptime(data, date_format)
    except ValueError:
        result = False
    return result


def _extract_sum(data):
    result = []

    data = data.replace('[SUM]', '')
    data = data[data.index('sec') + len('sec'):].strip()
    result.append(data[:data.index('KBytes')].strip())
    data = data[data.index('KBytes') + len('KBytes'):]
    result.append(data[:data.index('KBytes')].strip())
    return result


def _extract_timestamp(data):
    timestamp = ''

    data = data.replace('--', '').replace('Test', '').replace('\n', '').strip()
    if _is_timestamp(data):
        timestamp = data
    return timestamp


def _read_result(tmp_file):
    result = [eof]
    line = tmp_file.readline()

    # Check to see if there is data.
    if line != '':
        result = []
        if _extract_timestamp(line) != '':
            result = [_extract_timestamp(line)]
            while True:
                end_file_read = _process_line(tmp_file.readline())
                if end_file_read:
                    break
    return result


def _process_line(line, result):
    end_file_read = False

    if line.startswith('[SUM]'):
        result.extend(_extract_sum(line))
        end_file_read = True
    elif line.startswith('Client connecting to'):
        result.append(line[len('Client connecting to'):line.index(',')].strip())
    elif line.startswith('TCP window size:'):
        result.append(line[len('TCP window size:'):line.index('KByte')].strip())
    elif line == eof:
        end_file_read = True
    return end_file_read


if __name__ == '__main__':
    if os.path.exists(csv_file):
        print 'CSV file %s already exists!' % csv_file
        print 'Exiting...'
        exit(-1)
    print 'Generating CSV file...'
    try:
        _main()
    except KeyboardInterrupt:
        print '\nExiting...'
        exit(0)
    print 'Finished generating CSV file.'
